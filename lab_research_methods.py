# -*- coding: utf-8 -*-
"""Lab_Research Methods.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Jcnp2G2WMglmQmVugH6DWAAPTP-8ur3
"""



!git clone https://github.com/facebookresearch/fastText.git

# Commented out IPython magic to ensure Python compatibility.
# %cd fastText
!make
!cp fasttext ../
# %cd ..

!pip install fasttext

import fasttext
import torch
import torch.nn.functional as F

model = fasttext.load_model("/content/drive/MyDrive/Parameters/hi_model/indicnlp.ft.hi.300.bin")

df = df[df['EPS'].notna()]

import pandas as pd
import numpy as np


df_hindi = pd.read_excel("/content/drive/MyDrive/Research Methods/hindi_JEMR.xlsx")
df_hindi



# df_hindi.columns


df_hindi['Word_Similarity'] = None 


words = list(df_hindi['word_lex'])
print(words)

word_sim_forward = dict()


## Forward Word Similarity      
for i in range(0,len(words)-5):
  sim_torch_forward = 0
  # sim_sklearn = 0
  # sim_scipy = 0

  if words[i] == "ред":
    word_sim_forward[words[i]]= str(0)
    continue
  x_forward = model.get_word_vector(str(words[i]))
  # for j in range(i+1,i+6):
  count_forward = 0
  idx_forward = 1
  while count_forward<5:
      # print(words[i])
    if i+idx_forward>=len(words):
      break

    if words[i+idx_forward] == "ред":
      idx_forward +=1
      continue
    # print((words[i],words[j]))
    # print(words[i+count_forward])
    y_forward = model.get_word_vector(str(words[i+count_forward]))

    a_forward = torch.FloatTensor(x_forward)
    b_forward = torch.FloatTensor(y_forward)

    sim_torch_forward += F.cosine_similarity(a_forward, b_forward, dim=0)

    count_forward +=1
    idx_forward +=1
    
    # print(i,i+count_forward, words[i],words[i+count_forward], sim_torch_forward)
    # sim_sklearn +=cosine_similarity(x.reshape(1,-1),y.reshape(1,-1))
    # sim_scipy +=((1 - spatial.distance.cosine(x, y)))
    # print(sim_torch_forward)
  word_sim_forward[words[i]]= str(round(float(sim_torch_forward/5),3))

def find_similarity(word):
  if word in word_sim_forward.keys():
    return word_sim_forward[word]
  else:
    return None


df_hindi['Word_Similarity'] = df_hindi.apply(lambda row: find_similarity(row['word_lex']), axis=1)

df_hindi.to_csv("/content/drive/MyDrive/Research Methods/hindi_JEMR_new.csv", index = False)

